  
  
  
  

  
  
  
  
  
  
  


  



// ------------------------------------------------------------------------------------------------
// This code was generated by EntityFramework Reverse POCO Generator (http://www.reversepoco.com/).
// Created by Simon Hughes (https://about.me/simon.hughes).
//
// Do not make changes directly to this file - edit the template instead.
//
// The following connection settings were used to generate this file:
//     Connection String:      "server=s0134dbtemp; user=quantra; password=**zapped**;; database=NorthWindDatabase; pooling=true; Max Pool Size=100; Min Pool Size=8"
// ------------------------------------------------------------------------------------------------

// <auto-generated>
// ReSharper disable ConvertPropertyToExpressionBody
// ReSharper disable DoNotCallOverridableMethodsInConstructor
// ReSharper disable EmptyNamespace
// ReSharper disable InconsistentNaming
// ReSharper disable PartialMethodWithSinglePart
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable RedundantNameQualifier
// ReSharper disable RedundantOverridenMember
// ReSharper disable UseNameofExpression
// TargetFrameworkVersion = 2
#pragma warning disable 1591    //  Ignore "Missing XML Comment" warning


namespace EntityFramework.Reverse.POCO.Generator
{
    using System.Linq;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata.Builders;
	    #region Unit of work

    public interface IMyDbContext : System.IDisposable
    {
        DbSet<AlphabeticalListOfProduct> AlphabeticalListOfProducts { get; set; } // Alphabetical list of products
        DbSet<Category> Categories { get; set; } // Categories
        DbSet<CategorySalesFor1997> CategorySalesFor1997 { get; set; } // Category Sales for 1997
        DbSet<CurrentProductList> CurrentProductLists { get; set; } // Current Product List
        DbSet<Customer> Customers { get; set; } // Customers
        DbSet<CustomerAndSuppliersByCity> CustomerAndSuppliersByCities { get; set; } // Customer and Suppliers by City
        DbSet<CustomerDemographic> CustomerDemographics { get; set; } // CustomerDemographics
        DbSet<Employee> Employees { get; set; } // Employees
        DbSet<Invoice> Invoices { get; set; } // Invoices
        DbSet<Order> Orders { get; set; } // Orders
        DbSet<OrderDetail> OrderDetails { get; set; } // Order Details
        DbSet<OrderDetailsExtended> OrderDetailsExtendeds { get; set; } // Order Details Extended
        DbSet<OrdersQry> OrdersQries { get; set; } // Orders Qry
        DbSet<OrderSubtotal> OrderSubtotals { get; set; } // Order Subtotals
        DbSet<Product> Products { get; set; } // Products
        DbSet<ProductsAboveAveragePrice> ProductsAboveAveragePrices { get; set; } // Products Above Average Price
        DbSet<ProductSalesFor1997> ProductSalesFor1997 { get; set; } // Product Sales for 1997
        DbSet<ProductsByCategory> ProductsByCategories { get; set; } // Products by Category
        DbSet<Region> Regions { get; set; } // Region
        DbSet<SalesByCategory> SalesByCategories { get; set; } // Sales by Category
        DbSet<SalesTotalsByAmount> SalesTotalsByAmounts { get; set; } // Sales Totals by Amount
        DbSet<Shipper> Shippers { get; set; } // Shippers
        DbSet<SummaryOfSalesByQuarter> SummaryOfSalesByQuarters { get; set; } // Summary of Sales by Quarter
        DbSet<SummaryOfSalesByYear> SummaryOfSalesByYears { get; set; } // Summary of Sales by Year
        DbSet<Supplier> Suppliers { get; set; } // Suppliers
        DbSet<Territory> Territories { get; set; } // Territories

        int SaveChanges();

        Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker ChangeTracker { get; }
        Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade Database { get; }
        Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry<TEntity> Entry<TEntity>(TEntity entity) where TEntity : class;
        Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry Entry(object entity);
        Microsoft.EntityFrameworkCore.DbSet<TEntity> Set<TEntity>() where TEntity : class;
        string ToString();


        // Stored Procedures
        System.Collections.Generic.List<CustOrderHistReturnModel> CustOrderHist(string customerId);
        System.Collections.Generic.List<CustOrderHistReturnModel> CustOrderHist(string customerId, out int procResult);

        System.Collections.Generic.List<CustOrdersDetailReturnModel> CustOrdersDetail(int? orderId);
        System.Collections.Generic.List<CustOrdersDetailReturnModel> CustOrdersDetail(int? orderId, out int procResult);

        System.Collections.Generic.List<CustOrdersOrdersReturnModel> CustOrdersOrders(string customerId);
        System.Collections.Generic.List<CustOrdersOrdersReturnModel> CustOrdersOrders(string customerId, out int procResult);

        System.Collections.Generic.List<EmployeeSalesByCountryReturnModel> EmployeeSalesByCountry(System.DateTime? beginningDate, System.DateTime? endingDate);
        System.Collections.Generic.List<EmployeeSalesByCountryReturnModel> EmployeeSalesByCountry(System.DateTime? beginningDate, System.DateTime? endingDate, out int procResult);

        System.Collections.Generic.List<SalesByCategoryReturnModel> SalesByCategory(string categoryName, string ordYear);
        System.Collections.Generic.List<SalesByCategoryReturnModel> SalesByCategory(string categoryName, string ordYear, out int procResult);

        System.Collections.Generic.List<SalesByYearReturnModel> SalesByYear(System.DateTime? beginningDate, System.DateTime? endingDate);
        System.Collections.Generic.List<SalesByYearReturnModel> SalesByYear(System.DateTime? beginningDate, System.DateTime? endingDate, out int procResult);

        System.Collections.Generic.List<TenMostExpensiveProductsReturnModel> TenMostExpensiveProducts();
        System.Collections.Generic.List<TenMostExpensiveProductsReturnModel> TenMostExpensiveProducts(out int procResult);

    }

    #endregion

    #region Database context

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.34.1.0")]
    public class MyDbContext : Microsoft.EntityFrameworkCore.DbContext, IMyDbContext
    {
        public DbSet<AlphabeticalListOfProduct> AlphabeticalListOfProducts { get; set; } // Alphabetical list of products
        public DbSet<Category> Categories { get; set; } // Categories
        public DbSet<CategorySalesFor1997> CategorySalesFor1997 { get; set; } // Category Sales for 1997
        public DbSet<CurrentProductList> CurrentProductLists { get; set; } // Current Product List
        public DbSet<Customer> Customers { get; set; } // Customers
        public DbSet<CustomerAndSuppliersByCity> CustomerAndSuppliersByCities { get; set; } // Customer and Suppliers by City
        public DbSet<CustomerDemographic> CustomerDemographics { get; set; } // CustomerDemographics
        public DbSet<Employee> Employees { get; set; } // Employees
        public DbSet<Invoice> Invoices { get; set; } // Invoices
        public DbSet<Order> Orders { get; set; } // Orders
        public DbSet<OrderDetail> OrderDetails { get; set; } // Order Details
        public DbSet<OrderDetailsExtended> OrderDetailsExtendeds { get; set; } // Order Details Extended
        public DbSet<OrdersQry> OrdersQries { get; set; } // Orders Qry
        public DbSet<OrderSubtotal> OrderSubtotals { get; set; } // Order Subtotals
        public DbSet<Product> Products { get; set; } // Products
        public DbSet<ProductsAboveAveragePrice> ProductsAboveAveragePrices { get; set; } // Products Above Average Price
        public DbSet<ProductSalesFor1997> ProductSalesFor1997 { get; set; } // Product Sales for 1997
        public DbSet<ProductsByCategory> ProductsByCategories { get; set; } // Products by Category
        public DbSet<Region> Regions { get; set; } // Region
        public DbSet<SalesByCategory> SalesByCategories { get; set; } // Sales by Category
        public DbSet<SalesTotalsByAmount> SalesTotalsByAmounts { get; set; } // Sales Totals by Amount
        public DbSet<Shipper> Shippers { get; set; } // Shippers
        public DbSet<SummaryOfSalesByQuarter> SummaryOfSalesByQuarters { get; set; } // Summary of Sales by Quarter
        public DbSet<SummaryOfSalesByYear> SummaryOfSalesByYears { get; set; } // Summary of Sales by Year
        public DbSet<Supplier> Suppliers { get; set; } // Suppliers
        public DbSet<Territory> Territories { get; set; } // Territories

        public MyDbContext()
        {
        }
		string connectionString = "";
        public MyDbContext(string connectionString)
        {
		    this.connectionString = connectionString;
        }


       protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
       {
           if (!optionsBuilder.IsConfigured)
           {
               if (!string.IsNullOrWhiteSpace(connectionString))
               {
                   optionsBuilder.UseSqlServer(connectionString);
               }
           }
       }

        public bool IsSqlParameterNull(System.Data.SqlClient.SqlParameter param)
        {
            var sqlValue = param.SqlValue;
            var nullableValue = sqlValue as System.Data.SqlTypes.INullable;
            if (nullableValue != null)
                return nullableValue.IsNull;
            return (sqlValue == null || sqlValue == System.DBNull.Value);
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
		    modelBuilder.ApplyConfiguration<AlphabeticalListOfProduct>(new AlphabeticalListOfProductConfiguration());
		    modelBuilder.ApplyConfiguration<Category>(new CategoryConfiguration());
		    modelBuilder.ApplyConfiguration<CategorySalesFor1997>(new CategorySalesFor1997Configuration());
		    modelBuilder.ApplyConfiguration<CurrentProductList>(new CurrentProductListConfiguration());
		    modelBuilder.ApplyConfiguration<Customer>(new CustomerConfiguration());
		    modelBuilder.ApplyConfiguration<CustomerAndSuppliersByCity>(new CustomerAndSuppliersByCityConfiguration());
		    modelBuilder.ApplyConfiguration<CustomerDemographic>(new CustomerDemographicConfiguration());
		    modelBuilder.ApplyConfiguration<Employee>(new EmployeeConfiguration());
		    modelBuilder.ApplyConfiguration<Invoice>(new InvoiceConfiguration());
		    modelBuilder.ApplyConfiguration<Order>(new OrderConfiguration());
		    modelBuilder.ApplyConfiguration<OrderDetail>(new OrderDetailConfiguration());
		    modelBuilder.ApplyConfiguration<OrderDetailsExtended>(new OrderDetailsExtendedConfiguration());
		    modelBuilder.ApplyConfiguration<OrdersQry>(new OrdersQryConfiguration());
		    modelBuilder.ApplyConfiguration<OrderSubtotal>(new OrderSubtotalConfiguration());
		    modelBuilder.ApplyConfiguration<Product>(new ProductConfiguration());
		    modelBuilder.ApplyConfiguration<ProductsAboveAveragePrice>(new ProductsAboveAveragePriceConfiguration());
		    modelBuilder.ApplyConfiguration<ProductSalesFor1997>(new ProductSalesFor1997Configuration());
		    modelBuilder.ApplyConfiguration<ProductsByCategory>(new ProductsByCategoryConfiguration());
		    modelBuilder.ApplyConfiguration<Region>(new RegionConfiguration());
		    modelBuilder.ApplyConfiguration<SalesByCategory>(new SalesByCategoryConfiguration());
		    modelBuilder.ApplyConfiguration<SalesTotalsByAmount>(new SalesTotalsByAmountConfiguration());
		    modelBuilder.ApplyConfiguration<Shipper>(new ShipperConfiguration());
		    modelBuilder.ApplyConfiguration<SummaryOfSalesByQuarter>(new SummaryOfSalesByQuarterConfiguration());
		    modelBuilder.ApplyConfiguration<SummaryOfSalesByYear>(new SummaryOfSalesByYearConfiguration());
		    modelBuilder.ApplyConfiguration<Supplier>(new SupplierConfiguration());
		    modelBuilder.ApplyConfiguration<Territory>(new TerritoryConfiguration());
        }

        // Stored Procedures
        public System.Collections.Generic.List<CustOrderHistReturnModel> CustOrderHist(string customerId)
        {
            int procResult;
            return CustOrderHist(customerId, out procResult);
        }

        public System.Collections.Generic.List<CustOrderHistReturnModel> CustOrderHist(string customerId, out int procResult)
        {
            var customerIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@CustomerID", SqlDbType = System.Data.SqlDbType.NChar, Direction = System.Data.ParameterDirection.Input, Value = customerId, Size = 5 };
            if (customerIdParam.Value == null)
                customerIdParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
          	var procResultData = this.Set<CustOrderHistReturnModel>().FromSql("EXEC @procResult = [dbo].[CustOrderHist] @CustomerID", customerIdParam, procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public System.Collections.Generic.List<CustOrdersDetailReturnModel> CustOrdersDetail(int? orderId)
        {
            int procResult;
            return CustOrdersDetail(orderId, out procResult);
        }

        public System.Collections.Generic.List<CustOrdersDetailReturnModel> CustOrdersDetail(int? orderId, out int procResult)
        {
            var orderIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@OrderID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = orderId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!orderId.HasValue)
                orderIdParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
          	var procResultData = this.Set<CustOrdersDetailReturnModel>().FromSql("EXEC @procResult = [dbo].[CustOrdersDetail] @OrderID", orderIdParam, procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public System.Collections.Generic.List<CustOrdersOrdersReturnModel> CustOrdersOrders(string customerId)
        {
            int procResult;
            return CustOrdersOrders(customerId, out procResult);
        }

        public System.Collections.Generic.List<CustOrdersOrdersReturnModel> CustOrdersOrders(string customerId, out int procResult)
        {
            var customerIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@CustomerID", SqlDbType = System.Data.SqlDbType.NChar, Direction = System.Data.ParameterDirection.Input, Value = customerId, Size = 5 };
            if (customerIdParam.Value == null)
                customerIdParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
          	var procResultData = this.Set<CustOrdersOrdersReturnModel>().FromSql("EXEC @procResult = [dbo].[CustOrdersOrders] @CustomerID", customerIdParam, procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public System.Collections.Generic.List<EmployeeSalesByCountryReturnModel> EmployeeSalesByCountry(System.DateTime? beginningDate, System.DateTime? endingDate)
        {
            int procResult;
            return EmployeeSalesByCountry(beginningDate, endingDate, out procResult);
        }

        public System.Collections.Generic.List<EmployeeSalesByCountryReturnModel> EmployeeSalesByCountry(System.DateTime? beginningDate, System.DateTime? endingDate, out int procResult)
        {
            var beginningDateParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Beginning_Date", SqlDbType = System.Data.SqlDbType.DateTime, Direction = System.Data.ParameterDirection.Input, Value = beginningDate.GetValueOrDefault() };
            if (!beginningDate.HasValue)
                beginningDateParam.Value = System.DBNull.Value;

            var endingDateParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Ending_Date", SqlDbType = System.Data.SqlDbType.DateTime, Direction = System.Data.ParameterDirection.Input, Value = endingDate.GetValueOrDefault() };
            if (!endingDate.HasValue)
                endingDateParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
          	var procResultData = this.Set<EmployeeSalesByCountryReturnModel>().FromSql("EXEC @procResult = [dbo].[Employee Sales by Country] @Beginning_Date, @Ending_Date", beginningDateParam, endingDateParam, procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public System.Collections.Generic.List<SalesByCategoryReturnModel> SalesByCategory(string categoryName, string ordYear)
        {
            int procResult;
            return SalesByCategory(categoryName, ordYear, out procResult);
        }

        public System.Collections.Generic.List<SalesByCategoryReturnModel> SalesByCategory(string categoryName, string ordYear, out int procResult)
        {
            var categoryNameParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@CategoryName", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = categoryName, Size = 15 };
            if (categoryNameParam.Value == null)
                categoryNameParam.Value = System.DBNull.Value;

            var ordYearParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@OrdYear", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = ordYear, Size = 4 };
            if (ordYearParam.Value == null)
                ordYearParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
          	var procResultData = this.Set<SalesByCategoryReturnModel>().FromSql("EXEC @procResult = [dbo].[SalesByCategory] @CategoryName, @OrdYear", categoryNameParam, ordYearParam, procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public System.Collections.Generic.List<SalesByYearReturnModel> SalesByYear(System.DateTime? beginningDate, System.DateTime? endingDate)
        {
            int procResult;
            return SalesByYear(beginningDate, endingDate, out procResult);
        }

        public System.Collections.Generic.List<SalesByYearReturnModel> SalesByYear(System.DateTime? beginningDate, System.DateTime? endingDate, out int procResult)
        {
            var beginningDateParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Beginning_Date", SqlDbType = System.Data.SqlDbType.DateTime, Direction = System.Data.ParameterDirection.Input, Value = beginningDate.GetValueOrDefault() };
            if (!beginningDate.HasValue)
                beginningDateParam.Value = System.DBNull.Value;

            var endingDateParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Ending_Date", SqlDbType = System.Data.SqlDbType.DateTime, Direction = System.Data.ParameterDirection.Input, Value = endingDate.GetValueOrDefault() };
            if (!endingDate.HasValue)
                endingDateParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
          	var procResultData = this.Set<SalesByYearReturnModel>().FromSql("EXEC @procResult = [dbo].[Sales by Year] @Beginning_Date, @Ending_Date", beginningDateParam, endingDateParam, procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public System.Collections.Generic.List<TenMostExpensiveProductsReturnModel> TenMostExpensiveProducts()
        {
            int procResult;
            return TenMostExpensiveProducts(out procResult);
        }

        public System.Collections.Generic.List<TenMostExpensiveProductsReturnModel> TenMostExpensiveProducts(out int procResult)
        {
            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
          	var procResultData = this.Set<TenMostExpensiveProductsReturnModel>().FromSql("EXEC @procResult = [dbo].[Ten Most Expensive Products] ", procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

    }
    #endregion

    #region Fake Database context

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.34.1.0")]
    public class FakeMyDbContext : IMyDbContext
    {
        public DbSet<AlphabeticalListOfProduct> AlphabeticalListOfProducts { get; set; }
        public DbSet<Category> Categories { get; set; }
        public DbSet<CategorySalesFor1997> CategorySalesFor1997 { get; set; }
        public DbSet<CurrentProductList> CurrentProductLists { get; set; }
        public DbSet<Customer> Customers { get; set; }
        public DbSet<CustomerAndSuppliersByCity> CustomerAndSuppliersByCities { get; set; }
        public DbSet<CustomerDemographic> CustomerDemographics { get; set; }
        public DbSet<Employee> Employees { get; set; }
        public DbSet<Invoice> Invoices { get; set; }
        public DbSet<Order> Orders { get; set; }
        public DbSet<OrderDetail> OrderDetails { get; set; }
        public DbSet<OrderDetailsExtended> OrderDetailsExtendeds { get; set; }
        public DbSet<OrdersQry> OrdersQries { get; set; }
        public DbSet<OrderSubtotal> OrderSubtotals { get; set; }
        public DbSet<Product> Products { get; set; }
        public DbSet<ProductsAboveAveragePrice> ProductsAboveAveragePrices { get; set; }
        public DbSet<ProductSalesFor1997> ProductSalesFor1997 { get; set; }
        public DbSet<ProductsByCategory> ProductsByCategories { get; set; }
        public DbSet<Region> Regions { get; set; }
        public DbSet<SalesByCategory> SalesByCategories { get; set; }
        public DbSet<SalesTotalsByAmount> SalesTotalsByAmounts { get; set; }
        public DbSet<Shipper> Shippers { get; set; }
        public DbSet<SummaryOfSalesByQuarter> SummaryOfSalesByQuarters { get; set; }
        public DbSet<SummaryOfSalesByYear> SummaryOfSalesByYears { get; set; }
        public DbSet<Supplier> Suppliers { get; set; }
        public DbSet<Territory> Territories { get; set; }

        public FakeMyDbContext()
        {
            AlphabeticalListOfProducts = new FakeDbSet<AlphabeticalListOfProduct>("ProductId", "ProductName", "Discontinued", "CategoryName");
            Categories = new FakeDbSet<Category>("CategoryId");
            CategorySalesFor1997 = new FakeDbSet<CategorySalesFor1997>("CategoryName");
            CurrentProductLists = new FakeDbSet<CurrentProductList>("ProductId", "ProductName");
            Customers = new FakeDbSet<Customer>("CustomerId");
            CustomerAndSuppliersByCities = new FakeDbSet<CustomerAndSuppliersByCity>("CompanyName", "Relationship");
            CustomerDemographics = new FakeDbSet<CustomerDemographic>("CustomerTypeId");
            Employees = new FakeDbSet<Employee>("EmployeeId");
            Invoices = new FakeDbSet<Invoice>("CustomerName", "Salesperson", "OrderId", "ShipperName", "ProductId", "ProductName", "UnitPrice", "Quantity", "Discount");
            Orders = new FakeDbSet<Order>("OrderId");
            OrderDetails = new FakeDbSet<OrderDetail>("OrderId", "ProductId");
            OrderDetailsExtendeds = new FakeDbSet<OrderDetailsExtended>("OrderId", "ProductId", "ProductName", "UnitPrice", "Quantity", "Discount");
            OrdersQries = new FakeDbSet<OrdersQry>("OrderId", "CompanyName");
            OrderSubtotals = new FakeDbSet<OrderSubtotal>("OrderId");
            Products = new FakeDbSet<Product>("ProductId");
            ProductsAboveAveragePrices = new FakeDbSet<ProductsAboveAveragePrice>("ProductName");
            ProductSalesFor1997 = new FakeDbSet<ProductSalesFor1997>("CategoryName", "ProductName");
            ProductsByCategories = new FakeDbSet<ProductsByCategory>("CategoryName", "ProductName", "Discontinued");
            Regions = new FakeDbSet<Region>("RegionId");
            SalesByCategories = new FakeDbSet<SalesByCategory>("CategoryId", "CategoryName", "ProductName");
            SalesTotalsByAmounts = new FakeDbSet<SalesTotalsByAmount>("OrderId", "CompanyName");
            Shippers = new FakeDbSet<Shipper>("ShipperId");
            SummaryOfSalesByQuarters = new FakeDbSet<SummaryOfSalesByQuarter>("OrderId");
            SummaryOfSalesByYears = new FakeDbSet<SummaryOfSalesByYear>("OrderId");
            Suppliers = new FakeDbSet<Supplier>("SupplierId");
            Territories = new FakeDbSet<Territory>("TerritoryId");
        }

        public int SaveChangesCount { get; private set; }
        public int SaveChanges()
        {
            ++SaveChangesCount;
            return 1;
        }

        protected virtual void Dispose(bool disposing)
        {
        }

        public void Dispose()
        {
            Dispose(true);
        }

        private Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker _changeTracker;
        public Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker ChangeTracker { get { return _changeTracker; } }
        
        private Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade _database;
        public Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade Database { get { return _database; } }
        public Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry<TEntity> Entry<TEntity>(TEntity entity) where TEntity : class
        {
            throw new System.NotImplementedException();
        }
		public Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry Entry(object entity)
        {
            throw new System.NotImplementedException();
        }
        public DbSet<TEntity> Set<TEntity>() where TEntity : class
        {
            throw new System.NotImplementedException();
        }
        public override string ToString()
        {
            throw new System.NotImplementedException();
        }


        // Stored Procedures
        public System.Collections.Generic.List<CustOrderHistReturnModel> CustOrderHist(string customerId)
        {
            int procResult;
            return CustOrderHist(customerId, out procResult);
        }

        public System.Collections.Generic.List<CustOrderHistReturnModel> CustOrderHist(string customerId, out int procResult)
        {

            procResult = 0;
            return new System.Collections.Generic.List<CustOrderHistReturnModel>();
        }

        public System.Collections.Generic.List<CustOrdersDetailReturnModel> CustOrdersDetail(int? orderId)
        {
            int procResult;
            return CustOrdersDetail(orderId, out procResult);
        }

        public System.Collections.Generic.List<CustOrdersDetailReturnModel> CustOrdersDetail(int? orderId, out int procResult)
        {

            procResult = 0;
            return new System.Collections.Generic.List<CustOrdersDetailReturnModel>();
        }

        public System.Collections.Generic.List<CustOrdersOrdersReturnModel> CustOrdersOrders(string customerId)
        {
            int procResult;
            return CustOrdersOrders(customerId, out procResult);
        }

        public System.Collections.Generic.List<CustOrdersOrdersReturnModel> CustOrdersOrders(string customerId, out int procResult)
        {

            procResult = 0;
            return new System.Collections.Generic.List<CustOrdersOrdersReturnModel>();
        }

        public System.Collections.Generic.List<EmployeeSalesByCountryReturnModel> EmployeeSalesByCountry(System.DateTime? beginningDate, System.DateTime? endingDate)
        {
            int procResult;
            return EmployeeSalesByCountry(beginningDate, endingDate, out procResult);
        }

        public System.Collections.Generic.List<EmployeeSalesByCountryReturnModel> EmployeeSalesByCountry(System.DateTime? beginningDate, System.DateTime? endingDate, out int procResult)
        {

            procResult = 0;
            return new System.Collections.Generic.List<EmployeeSalesByCountryReturnModel>();
        }

        public System.Collections.Generic.List<SalesByCategoryReturnModel> SalesByCategory(string categoryName, string ordYear)
        {
            int procResult;
            return SalesByCategory(categoryName, ordYear, out procResult);
        }

        public System.Collections.Generic.List<SalesByCategoryReturnModel> SalesByCategory(string categoryName, string ordYear, out int procResult)
        {

            procResult = 0;
            return new System.Collections.Generic.List<SalesByCategoryReturnModel>();
        }

        public System.Collections.Generic.List<SalesByYearReturnModel> SalesByYear(System.DateTime? beginningDate, System.DateTime? endingDate)
        {
            int procResult;
            return SalesByYear(beginningDate, endingDate, out procResult);
        }

        public System.Collections.Generic.List<SalesByYearReturnModel> SalesByYear(System.DateTime? beginningDate, System.DateTime? endingDate, out int procResult)
        {

            procResult = 0;
            return new System.Collections.Generic.List<SalesByYearReturnModel>();
        }

        public System.Collections.Generic.List<TenMostExpensiveProductsReturnModel> TenMostExpensiveProducts()
        {
            int procResult;
            return TenMostExpensiveProducts(out procResult);
        }

        public System.Collections.Generic.List<TenMostExpensiveProductsReturnModel> TenMostExpensiveProducts(out int procResult)
        {

            procResult = 0;
            return new System.Collections.Generic.List<TenMostExpensiveProductsReturnModel>();
        }

    }

    // ************************************************************************
    // Fake DbSet
    // Implementing Find:
    //      The Find method is difficult to implement in a generic fashion. If
    //      you need to test code that makes use of the Find method it is
    //      easiest to create a test DbSet for each of the entity types that
    //      need to support find. You can then write logic to find that
    //      particular type of entity, as shown below:
    //      public class FakeBlogDbSet : FakeDbSet<Blog>
    //      {
    //          public override Blog Find(params object[] keyValues)
    //          {
    //              var id = (int) keyValues.Single();
    //              return this.SingleOrDefault(b => b.BlogId == id);
    //          }
    //      }
    //      Read more about it here: https://msdn.microsoft.com/en-us/data/dn314431.aspx
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.34.1.0")]
    public class FakeDbSet<TEntity> : DbSet<TEntity>, IQueryable, System.Collections.Generic.IEnumerable<TEntity> where TEntity : class
    {
        private readonly System.Reflection.PropertyInfo[] _primaryKeys;
        private readonly System.Collections.ObjectModel.ObservableCollection<TEntity> _data;
        private readonly IQueryable _query;

        public FakeDbSet()
        {
            _data = new System.Collections.ObjectModel.ObservableCollection<TEntity>();
            _query = _data.AsQueryable();
        }

        public FakeDbSet(params string[] primaryKeys)
        {
            _primaryKeys = typeof(TEntity).GetProperties().Where(x => primaryKeys.Contains(x.Name)).ToArray();
            _data = new System.Collections.ObjectModel.ObservableCollection<TEntity>();
            _query = _data.AsQueryable();
        }

        public override TEntity Find(params object[] keyValues)
        {
            if (_primaryKeys == null)
                throw new System.ArgumentException("No primary keys defined");
            if (keyValues.Length != _primaryKeys.Length)
                throw new System.ArgumentException("Incorrect number of keys passed to Find method");

            var keyQuery = this.AsQueryable();
            keyQuery = keyValues
                .Select((t, i) => i)
                .Aggregate(keyQuery,
                    (current, x) =>
                        current.Where(entity => _primaryKeys[x].GetValue(entity, null).Equals(keyValues[x])));

            return keyQuery.SingleOrDefault();
        }

        public override void AddRange(System.Collections.Generic.IEnumerable<TEntity> entities)
        {
            if (entities == null) throw new System.ArgumentNullException("entities");
            var items = entities.ToList();
            foreach (var entity in items)
            {
                _data.Add(entity);
            }
        }

        public override Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry<TEntity> Add(TEntity item)
        {
            if (item == null) throw new System.ArgumentNullException("item");
            _data.Add(item);
            return null;
        }

        public override void RemoveRange(System.Collections.Generic.IEnumerable<TEntity> entities)
        {
            if (entities == null) throw new System.ArgumentNullException("entities");
            var items = entities.ToList();
            foreach (var entity in items)
            {
                _data.Remove(entity);
            }
        }

        public override Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry<TEntity> Remove(TEntity item)
        {
            if (item == null) throw new System.ArgumentNullException("item");
            _data.Remove(item);
            return null;
        }

        public override Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry<TEntity> Attach(TEntity item)
        {
            if (item == null) throw new System.ArgumentNullException("item");
            _data.Add(item);
            return null;
        }
		
        System.Type IQueryable.ElementType
        {
            get { return _query.ElementType; }
        }

        System.Linq.Expressions.Expression IQueryable.Expression
        {
            get { return _query.Expression; }
        }

        IQueryProvider IQueryable.Provider
        {
            get { return _query.Provider; }
        }

        System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
        {
            return _data.GetEnumerator();
        }

        System.Collections.Generic.IEnumerator<TEntity> System.Collections.Generic.IEnumerable<TEntity>.GetEnumerator()
        {
            return _data.GetEnumerator();
        }
    }

    #endregion

    #region POCO classes

    // Alphabetical list of products
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.34.1.0")]
    public class AlphabeticalListOfProduct
    {
        public int ProductId { get; set; } // ProductID (Primary key)
        public string ProductName { get; set; } // ProductName (Primary key) (length: 40)
        public int? SupplierId { get; set; } // SupplierID
        public int? CategoryId { get; set; } // CategoryID
        public string QuantityPerUnit { get; set; } // QuantityPerUnit (length: 20)
        public decimal? UnitPrice { get; set; } // UnitPrice
        public short? UnitsInStock { get; set; } // UnitsInStock
        public short? UnitsOnOrder { get; set; } // UnitsOnOrder
        public short? ReorderLevel { get; set; } // ReorderLevel
        public bool Discontinued { get; set; } // Discontinued (Primary key)
        public string CategoryName { get; set; } // CategoryName (Primary key) (length: 15)

//todo: Deleted foreign key rows from here!!!!!!!!!!!!!!!

    }

    // Categories
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.34.1.0")]
    public class Category
    {
        public int CategoryId { get; set; } // CategoryID (Primary key)
        public string CategoryName { get; set; } // CategoryName (length: 15)
        public string Description { get; set; } // Description (length: 1073741823)
        public byte[] Picture { get; set; } // Picture (length: 2147483647)

        // Reverse navigation

        /// <summary>
        /// Child Products where [Products].[CategoryID] point to this entity (FK_Products_Categories)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<Product> Products { get; set; } // Products.FK_Products_Categories

//todo: Deleted foreign key rows from here!!!!!!!!!!!!!!!


        public Category()
        {
            Products = new System.Collections.Generic.List<Product>();
        }
    }

    // Category Sales for 1997
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.34.1.0")]
    public class CategorySalesFor1997
    {
        public string CategoryName { get; set; } // CategoryName (Primary key) (length: 15)
        public decimal? CategorySales { get; set; } // CategorySales

//todo: Deleted foreign key rows from here!!!!!!!!!!!!!!!

    }

    // Current Product List
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.34.1.0")]
    public class CurrentProductList
    {
        public int ProductId { get; set; } // ProductID (Primary key)
        public string ProductName { get; set; } // ProductName (Primary key) (length: 40)

//todo: Deleted foreign key rows from here!!!!!!!!!!!!!!!

    }

    // Customers
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.34.1.0")]
    public class Customer
    {
        public string CustomerId { get; set; } // CustomerID (Primary key) (length: 5)
        public string CompanyName { get; set; } // CompanyName (length: 40)
        public string ContactName { get; set; } // ContactName (length: 30)
        public string ContactTitle { get; set; } // ContactTitle (length: 30)
        public string Address { get; set; } // Address (length: 60)
        public string City { get; set; } // City (length: 15)
        public string Region { get; set; } // Region (length: 15)
        public string PostalCode { get; set; } // PostalCode (length: 10)
        public string Country { get; set; } // Country (length: 15)
        public string Phone { get; set; } // Phone (length: 24)
        public string Fax { get; set; } // Fax (length: 24)

        // Reverse navigation

        /// <summary>
        /// Child CustomerDemographics (Many-to-Many) mapped by table [CustomerCustomerDemo]
        /// </summary>
        public virtual System.Collections.Generic.ICollection<CustomerDemographic> CustomerDemographics { get; set; } // Many to many mapping
        /// <summary>
        /// Child Orders where [Orders].[CustomerID] point to this entity (FK_Orders_Customers)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<Order> Orders { get; set; } // Orders.FK_Orders_Customers

//todo: Deleted foreign key rows from here!!!!!!!!!!!!!!!


        public Customer()
        {
            Orders = new System.Collections.Generic.List<Order>();
            CustomerDemographics = new System.Collections.Generic.List<CustomerDemographic>();
        }
    }

    // Customer and Suppliers by City
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.34.1.0")]
    public class CustomerAndSuppliersByCity
    {
        public string City { get; set; } // City (length: 15)
        public string CompanyName { get; set; } // CompanyName (Primary key) (length: 40)
        public string ContactName { get; set; } // ContactName (length: 30)
        public string Relationship { get; set; } // Relationship (Primary key) (length: 9)

//todo: Deleted foreign key rows from here!!!!!!!!!!!!!!!

    }

    // CustomerDemographics
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.34.1.0")]
    public class CustomerDemographic
    {
        public string CustomerTypeId { get; set; } // CustomerTypeID (Primary key) (length: 10)
        public string CustomerDesc { get; set; } // CustomerDesc (length: 1073741823)

        // Reverse navigation

        /// <summary>
        /// Child Customers (Many-to-Many) mapped by table [CustomerCustomerDemo]
        /// </summary>
        public virtual System.Collections.Generic.ICollection<Customer> Customers { get; set; } // Many to many mapping

//todo: Deleted foreign key rows from here!!!!!!!!!!!!!!!


        public CustomerDemographic()
        {
            Customers = new System.Collections.Generic.List<Customer>();
        }
    }

    // Employees
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.34.1.0")]
    public class Employee
    {
        public int EmployeeId { get; set; } // EmployeeID (Primary key)
        public string LastName { get; set; } // LastName (length: 20)
        public string FirstName { get; set; } // FirstName (length: 10)
        public string Title { get; set; } // Title (length: 30)
        public string TitleOfCourtesy { get; set; } // TitleOfCourtesy (length: 25)
        public System.DateTime? BirthDate { get; set; } // BirthDate
        public System.DateTime? HireDate { get; set; } // HireDate
        public string Address { get; set; } // Address (length: 60)
        public string City { get; set; } // City (length: 15)
        public string Region { get; set; } // Region (length: 15)
        public string PostalCode { get; set; } // PostalCode (length: 10)
        public string Country { get; set; } // Country (length: 15)
        public string HomePhone { get; set; } // HomePhone (length: 24)
        public string Extension { get; set; } // Extension (length: 4)
        public byte[] Photo { get; set; } // Photo (length: 2147483647)
        public string Notes { get; set; } // Notes (length: 1073741823)
        public int? ReportsTo { get; set; } // ReportsTo
        public string PhotoPath { get; set; } // PhotoPath (length: 255)

        // Reverse navigation

        /// <summary>
        /// Child Employees where [Employees].[ReportsTo] point to this entity (FK_Employees_Employees)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<Employee> Employees { get; set; } // Employees.FK_Employees_Employees
        /// <summary>
        /// Child Orders where [Orders].[EmployeeID] point to this entity (FK_Orders_Employees)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<Order> Orders { get; set; } // Orders.FK_Orders_Employees
        /// <summary>
        /// Child Territories (Many-to-Many) mapped by table [EmployeeTerritories]
        /// </summary>
        public virtual System.Collections.Generic.ICollection<Territory> Territories { get; set; } // Many to many mapping

//todo: Deleted foreign key rows from here!!!!!!!!!!!!!!!


        public Employee()
        {
            Employees = new System.Collections.Generic.List<Employee>();
            Orders = new System.Collections.Generic.List<Order>();
            Territories = new System.Collections.Generic.List<Territory>();
        }
    }

    // Invoices
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.34.1.0")]
    public class Invoice
    {
        public string ShipName { get; set; } // ShipName (length: 40)
        public string ShipAddress { get; set; } // ShipAddress (length: 60)
        public string ShipCity { get; set; } // ShipCity (length: 15)
        public string ShipRegion { get; set; } // ShipRegion (length: 15)
        public string ShipPostalCode { get; set; } // ShipPostalCode (length: 10)
        public string ShipCountry { get; set; } // ShipCountry (length: 15)
        public string CustomerId { get; set; } // CustomerID (length: 5)
        public string CustomerName { get; set; } // CustomerName (Primary key) (length: 40)
        public string Address { get; set; } // Address (length: 60)
        public string City { get; set; } // City (length: 15)
        public string Region { get; set; } // Region (length: 15)
        public string PostalCode { get; set; } // PostalCode (length: 10)
        public string Country { get; set; } // Country (length: 15)
        public string Salesperson { get; set; } // Salesperson (Primary key) (length: 31)
        public int OrderId { get; set; } // OrderID (Primary key)
        public System.DateTime? OrderDate { get; set; } // OrderDate
        public System.DateTime? RequiredDate { get; set; } // RequiredDate
        public System.DateTime? ShippedDate { get; set; } // ShippedDate
        public string ShipperName { get; set; } // ShipperName (Primary key) (length: 40)
        public int ProductId { get; set; } // ProductID (Primary key)
        public string ProductName { get; set; } // ProductName (Primary key) (length: 40)
        public decimal UnitPrice { get; set; } // UnitPrice (Primary key)
        public short Quantity { get; set; } // Quantity (Primary key)
        public float Discount { get; set; } // Discount (Primary key)
        public decimal? ExtendedPrice { get; set; } // ExtendedPrice
        public decimal? Freight { get; set; } // Freight

//todo: Deleted foreign key rows from here!!!!!!!!!!!!!!!

    }

    // Orders
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.34.1.0")]
    public class Order
    {
        public int OrderId { get; set; } // OrderID (Primary key)
        public string CustomerId { get; set; } // CustomerID (length: 5)
        public int? EmployeeId { get; set; } // EmployeeID
        public System.DateTime? OrderDate { get; set; } // OrderDate
        public System.DateTime? RequiredDate { get; set; } // RequiredDate
        public System.DateTime? ShippedDate { get; set; } // ShippedDate
        public int? ShipVia { get; set; } // ShipVia
        public decimal? Freight { get; set; } // Freight
        public string ShipName { get; set; } // ShipName (length: 40)
        public string ShipAddress { get; set; } // ShipAddress (length: 60)
        public string ShipCity { get; set; } // ShipCity (length: 15)
        public string ShipRegion { get; set; } // ShipRegion (length: 15)
        public string ShipPostalCode { get; set; } // ShipPostalCode (length: 10)
        public string ShipCountry { get; set; } // ShipCountry (length: 15)

        // Reverse navigation

        /// <summary>
        /// Child OrderDetails where [Order Details].[OrderID] point to this entity (FK_Order_Details_Orders)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<OrderDetail> OrderDetails { get; set; } // Order Details.FK_Order_Details_Orders

//todo: Deleted foreign key rows from here!!!!!!!!!!!!!!!


        public Order()
        {
            Freight = 0m;
            OrderDetails = new System.Collections.Generic.List<OrderDetail>();
        }
    }

    // Order Details
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.34.1.0")]
    public class OrderDetail
    {
        public int OrderId { get; set; } // OrderID (Primary key)
        public int ProductId { get; set; } // ProductID (Primary key)
        public decimal UnitPrice { get; set; } // UnitPrice
        public short Quantity { get; set; } // Quantity
        public float Discount { get; set; } // Discount

//todo: Deleted foreign key rows from here!!!!!!!!!!!!!!!


        public OrderDetail()
        {
            UnitPrice = 0m;
            Quantity = 1;
            Discount = 0f;
        }
    }

    // Order Details Extended
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.34.1.0")]
    public class OrderDetailsExtended
    {
        public int OrderId { get; set; } // OrderID (Primary key)
        public int ProductId { get; set; } // ProductID (Primary key)
        public string ProductName { get; set; } // ProductName (Primary key) (length: 40)
        public decimal UnitPrice { get; set; } // UnitPrice (Primary key)
        public short Quantity { get; set; } // Quantity (Primary key)
        public float Discount { get; set; } // Discount (Primary key)
        public decimal? ExtendedPrice { get; set; } // ExtendedPrice

//todo: Deleted foreign key rows from here!!!!!!!!!!!!!!!

    }

    // Orders Qry
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.34.1.0")]
    public class OrdersQry
    {
        public int OrderId { get; set; } // OrderID (Primary key)
        public string CustomerId { get; set; } // CustomerID (length: 5)
        public int? EmployeeId { get; set; } // EmployeeID
        public System.DateTime? OrderDate { get; set; } // OrderDate
        public System.DateTime? RequiredDate { get; set; } // RequiredDate
        public System.DateTime? ShippedDate { get; set; } // ShippedDate
        public int? ShipVia { get; set; } // ShipVia
        public decimal? Freight { get; set; } // Freight
        public string ShipName { get; set; } // ShipName (length: 40)
        public string ShipAddress { get; set; } // ShipAddress (length: 60)
        public string ShipCity { get; set; } // ShipCity (length: 15)
        public string ShipRegion { get; set; } // ShipRegion (length: 15)
        public string ShipPostalCode { get; set; } // ShipPostalCode (length: 10)
        public string ShipCountry { get; set; } // ShipCountry (length: 15)
        public string CompanyName { get; set; } // CompanyName (Primary key) (length: 40)
        public string Address { get; set; } // Address (length: 60)
        public string City { get; set; } // City (length: 15)
        public string Region { get; set; } // Region (length: 15)
        public string PostalCode { get; set; } // PostalCode (length: 10)
        public string Country { get; set; } // Country (length: 15)

//todo: Deleted foreign key rows from here!!!!!!!!!!!!!!!

    }

    // Order Subtotals
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.34.1.0")]
    public class OrderSubtotal
    {
        public int OrderId { get; set; } // OrderID (Primary key)
        public decimal? Subtotal { get; set; } // Subtotal

//todo: Deleted foreign key rows from here!!!!!!!!!!!!!!!

    }

    // Products
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.34.1.0")]
    public class Product
    {
        public int ProductId { get; set; } // ProductID (Primary key)
        public string ProductName { get; set; } // ProductName (length: 40)
        public int? SupplierId { get; set; } // SupplierID
        public int? CategoryId { get; set; } // CategoryID
        public string QuantityPerUnit { get; set; } // QuantityPerUnit (length: 20)
        public decimal? UnitPrice { get; set; } // UnitPrice
        public short? UnitsInStock { get; set; } // UnitsInStock
        public short? UnitsOnOrder { get; set; } // UnitsOnOrder
        public short? ReorderLevel { get; set; } // ReorderLevel
        public bool Discontinued { get; set; } // Discontinued

        // Reverse navigation

        /// <summary>
        /// Child OrderDetails where [Order Details].[ProductID] point to this entity (FK_Order_Details_Products)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<OrderDetail> OrderDetails { get; set; } // Order Details.FK_Order_Details_Products

//todo: Deleted foreign key rows from here!!!!!!!!!!!!!!!


        public Product()
        {
            UnitPrice = 0m;
            UnitsInStock = 0;
            UnitsOnOrder = 0;
            ReorderLevel = 0;
            Discontinued = false;
            OrderDetails = new System.Collections.Generic.List<OrderDetail>();
        }
    }

    // Products Above Average Price
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.34.1.0")]
    public class ProductsAboveAveragePrice
    {
        public string ProductName { get; set; } // ProductName (Primary key) (length: 40)
        public decimal? UnitPrice { get; set; } // UnitPrice

//todo: Deleted foreign key rows from here!!!!!!!!!!!!!!!

    }

    // Product Sales for 1997
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.34.1.0")]
    public class ProductSalesFor1997
    {
        public string CategoryName { get; set; } // CategoryName (Primary key) (length: 15)
        public string ProductName { get; set; } // ProductName (Primary key) (length: 40)
        public decimal? ProductSales { get; set; } // ProductSales

//todo: Deleted foreign key rows from here!!!!!!!!!!!!!!!

    }

    // Products by Category
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.34.1.0")]
    public class ProductsByCategory
    {
        public string CategoryName { get; set; } // CategoryName (Primary key) (length: 15)
        public string ProductName { get; set; } // ProductName (Primary key) (length: 40)
        public string QuantityPerUnit { get; set; } // QuantityPerUnit (length: 20)
        public short? UnitsInStock { get; set; } // UnitsInStock
        public bool Discontinued { get; set; } // Discontinued (Primary key)

//todo: Deleted foreign key rows from here!!!!!!!!!!!!!!!

    }

    // The table 'Quarterly Orders' is not usable by entity framework because it
    // does not have a primary key. It is listed here for completeness.
    // Quarterly Orders
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.34.1.0")]
    public class QuarterlyOrder
    {
        public string CustomerId { get; set; } // CustomerID (length: 5)
        public string CompanyName { get; set; } // CompanyName (length: 40)
        public string City { get; set; } // City (length: 15)
        public string Country { get; set; } // Country (length: 15)

//todo: Deleted foreign key rows from here!!!!!!!!!!!!!!!

    }

    // Region
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.34.1.0")]
    public class Region
    {
        public int RegionId { get; set; } // RegionID (Primary key)
        public string RegionDescription { get; set; } // RegionDescription (length: 50)

        // Reverse navigation

        /// <summary>
        /// Child Territories where [Territories].[RegionID] point to this entity (FK_Territories_Region)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<Territory> Territories { get; set; } // Territories.FK_Territories_Region

//todo: Deleted foreign key rows from here!!!!!!!!!!!!!!!


        public Region()
        {
            Territories = new System.Collections.Generic.List<Territory>();
        }
    }

    // Sales by Category
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.34.1.0")]
    public class SalesByCategory
    {
        public int CategoryId { get; set; } // CategoryID (Primary key)
        public string CategoryName { get; set; } // CategoryName (Primary key) (length: 15)
        public string ProductName { get; set; } // ProductName (Primary key) (length: 40)
        public decimal? ProductSales { get; set; } // ProductSales

//todo: Deleted foreign key rows from here!!!!!!!!!!!!!!!

    }

    // Sales Totals by Amount
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.34.1.0")]
    public class SalesTotalsByAmount
    {
        public decimal? SaleAmount { get; set; } // SaleAmount
        public int OrderId { get; set; } // OrderID (Primary key)
        public string CompanyName { get; set; } // CompanyName (Primary key) (length: 40)
        public System.DateTime? ShippedDate { get; set; } // ShippedDate

//todo: Deleted foreign key rows from here!!!!!!!!!!!!!!!

    }

    // Shippers
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.34.1.0")]
    public class Shipper
    {
        public int ShipperId { get; set; } // ShipperID (Primary key)
        public string CompanyName { get; set; } // CompanyName (length: 40)
        public string Phone { get; set; } // Phone (length: 24)

        // Reverse navigation

        /// <summary>
        /// Child Orders where [Orders].[ShipVia] point to this entity (FK_Orders_Shippers)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<Order> Orders { get; set; } // Orders.FK_Orders_Shippers

//todo: Deleted foreign key rows from here!!!!!!!!!!!!!!!


        public Shipper()
        {
            Orders = new System.Collections.Generic.List<Order>();
        }
    }

    // Summary of Sales by Quarter
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.34.1.0")]
    public class SummaryOfSalesByQuarter
    {
        public System.DateTime? ShippedDate { get; set; } // ShippedDate
        public int OrderId { get; set; } // OrderID (Primary key)
        public decimal? Subtotal { get; set; } // Subtotal

//todo: Deleted foreign key rows from here!!!!!!!!!!!!!!!

    }

    // Summary of Sales by Year
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.34.1.0")]
    public class SummaryOfSalesByYear
    {
        public System.DateTime? ShippedDate { get; set; } // ShippedDate
        public int OrderId { get; set; } // OrderID (Primary key)
        public decimal? Subtotal { get; set; } // Subtotal

//todo: Deleted foreign key rows from here!!!!!!!!!!!!!!!

    }

    // Suppliers
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.34.1.0")]
    public class Supplier
    {
        public int SupplierId { get; set; } // SupplierID (Primary key)
        public string CompanyName { get; set; } // CompanyName (length: 40)
        public string ContactName { get; set; } // ContactName (length: 30)
        public string ContactTitle { get; set; } // ContactTitle (length: 30)
        public string Address { get; set; } // Address (length: 60)
        public string City { get; set; } // City (length: 15)
        public string Region { get; set; } // Region (length: 15)
        public string PostalCode { get; set; } // PostalCode (length: 10)
        public string Country { get; set; } // Country (length: 15)
        public string Phone { get; set; } // Phone (length: 24)
        public string Fax { get; set; } // Fax (length: 24)
        public string HomePage { get; set; } // HomePage (length: 1073741823)

        // Reverse navigation

        /// <summary>
        /// Child Products where [Products].[SupplierID] point to this entity (FK_Products_Suppliers)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<Product> Products { get; set; } // Products.FK_Products_Suppliers

//todo: Deleted foreign key rows from here!!!!!!!!!!!!!!!


        public Supplier()
        {
            Products = new System.Collections.Generic.List<Product>();
        }
    }

    // Territories
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.34.1.0")]
    public class Territory
    {
        public string TerritoryId { get; set; } // TerritoryID (Primary key) (length: 20)
        public string TerritoryDescription { get; set; } // TerritoryDescription (length: 50)
        public int RegionId { get; set; } // RegionID

        // Reverse navigation

        /// <summary>
        /// Child Employees (Many-to-Many) mapped by table [EmployeeTerritories]
        /// </summary>
        public virtual System.Collections.Generic.ICollection<Employee> Employees { get; set; } // Many to many mapping

//todo: Deleted foreign key rows from here!!!!!!!!!!!!!!!


        public Territory()
        {
            Employees = new System.Collections.Generic.List<Employee>();
        }
    }

    #endregion

    #region POCO Configuration

    // Alphabetical list of products
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.34.1.0")]
    public  class AlphabeticalListOfProductConfiguration : IEntityTypeConfiguration<AlphabeticalListOfProduct>
    {
	    public void Configure(EntityTypeBuilder<AlphabeticalListOfProduct> builder)
        {
            builder.ToTable("Alphabetical list of products", "dbo");
            builder.HasKey(x => new { x.ProductId, x.ProductName, x.Discontinued, x.CategoryName });

            builder.Property(x => x.ProductId).HasColumnName(@"ProductID").HasColumnType("int").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.ProductName).HasColumnType("nvarchar(40)").IsRequired().HasMaxLength(40).ValueGeneratedNever();
            builder.Property(x => x.SupplierId).HasColumnName(@"SupplierID").HasColumnType("int");
            builder.Property(x => x.CategoryId).HasColumnName(@"CategoryID").HasColumnType("int");
            builder.Property(x => x.QuantityPerUnit).HasColumnType("nvarchar(20)").HasMaxLength(20);
            builder.Property(x => x.UnitPrice).HasColumnType("decimal(19,4)");
            builder.Property(x => x.UnitsInStock).HasColumnName(@"UnitsInStock").HasColumnType("smallint");
            builder.Property(x => x.UnitsOnOrder).HasColumnName(@"UnitsOnOrder").HasColumnType("smallint");
            builder.Property(x => x.ReorderLevel).HasColumnName(@"ReorderLevel").HasColumnType("smallint");
            builder.Property(x => x.Discontinued).HasColumnName(@"Discontinued").HasColumnType("bit").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.CategoryName).HasColumnType("nvarchar(15)").IsRequired().HasMaxLength(15).ValueGeneratedNever();



//todo: Deleted foreign key and relation mapping configuration rows from here!!!!!!!!!!!!!


        }
    }
  
    // Categories
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.34.1.0")]
    public  class CategoryConfiguration : IEntityTypeConfiguration<Category>
    {
	    public void Configure(EntityTypeBuilder<Category> builder)
        {
            builder.ToTable("Categories", "dbo");
            builder.HasKey(x => x.CategoryId);

            builder.Property(x => x.CategoryId).HasColumnName(@"CategoryID").HasColumnType("int").IsRequired().ValueGeneratedOnAdd();
            builder.Property(x => x.CategoryName).HasColumnType("nvarchar(15)").IsRequired().HasMaxLength(15);
            builder.Property(x => x.Description).HasColumnName(@"Description").HasColumnType("ntext").HasMaxLength(1073741823);
            builder.Property(x => x.Picture).HasColumnName(@"Picture").HasColumnType("image").HasMaxLength(2147483647);



//todo: Deleted foreign key and relation mapping configuration rows from here!!!!!!!!!!!!!


        }
    }
  
    // Category Sales for 1997
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.34.1.0")]
    public  class CategorySalesFor1997Configuration : IEntityTypeConfiguration<CategorySalesFor1997>
    {
	    public void Configure(EntityTypeBuilder<CategorySalesFor1997> builder)
        {
            builder.ToTable("Category Sales for 1997", "dbo");
            builder.HasKey(x => x.CategoryName);

            builder.Property(x => x.CategoryName).HasColumnType("nvarchar(15)").IsRequired().HasMaxLength(15).ValueGeneratedNever();
            builder.Property(x => x.CategorySales).HasColumnType("decimal(19,4)");



//todo: Deleted foreign key and relation mapping configuration rows from here!!!!!!!!!!!!!


        }
    }
  
    // Current Product List
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.34.1.0")]
    public  class CurrentProductListConfiguration : IEntityTypeConfiguration<CurrentProductList>
    {
	    public void Configure(EntityTypeBuilder<CurrentProductList> builder)
        {
            builder.ToTable("Current Product List", "dbo");
            builder.HasKey(x => new { x.ProductId, x.ProductName });

            builder.Property(x => x.ProductId).HasColumnName(@"ProductID").HasColumnType("int").IsRequired().ValueGeneratedOnAdd();
            builder.Property(x => x.ProductName).HasColumnType("nvarchar(40)").IsRequired().HasMaxLength(40).ValueGeneratedNever();



//todo: Deleted foreign key and relation mapping configuration rows from here!!!!!!!!!!!!!


        }
    }
  
    // Customers
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.34.1.0")]
    public  class CustomerConfiguration : IEntityTypeConfiguration<Customer>
    {
	    public void Configure(EntityTypeBuilder<Customer> builder)
        {
            builder.ToTable("Customers", "dbo");
            builder.HasKey(x => x.CustomerId);

            builder.Property(x => x.CustomerId).HasColumnType("nchar(5)").IsRequired().HasMaxLength(5).ValueGeneratedNever();
            builder.Property(x => x.CompanyName).HasColumnType("nvarchar(40)").IsRequired().HasMaxLength(40);
            builder.Property(x => x.ContactName).HasColumnType("nvarchar(30)").HasMaxLength(30);
            builder.Property(x => x.ContactTitle).HasColumnType("nvarchar(30)").HasMaxLength(30);
            builder.Property(x => x.Address).HasColumnType("nvarchar(60)").HasMaxLength(60);
            builder.Property(x => x.City).HasColumnType("nvarchar(15)").HasMaxLength(15);
            builder.Property(x => x.Region).HasColumnType("nvarchar(15)").HasMaxLength(15);
            builder.Property(x => x.PostalCode).HasColumnType("nvarchar(10)").HasMaxLength(10);
            builder.Property(x => x.Country).HasColumnType("nvarchar(15)").HasMaxLength(15);
            builder.Property(x => x.Phone).HasColumnType("nvarchar(24)").HasMaxLength(24);
            builder.Property(x => x.Fax).HasColumnType("nvarchar(24)").HasMaxLength(24);



//todo: Deleted foreign key and relation mapping configuration rows from here!!!!!!!!!!!!!


        }
    }
  
    // Customer and Suppliers by City
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.34.1.0")]
    public  class CustomerAndSuppliersByCityConfiguration : IEntityTypeConfiguration<CustomerAndSuppliersByCity>
    {
	    public void Configure(EntityTypeBuilder<CustomerAndSuppliersByCity> builder)
        {
            builder.ToTable("Customer and Suppliers by City", "dbo");
            builder.HasKey(x => new { x.CompanyName, x.Relationship });

            builder.Property(x => x.City).HasColumnType("nvarchar(15)").HasMaxLength(15);
            builder.Property(x => x.CompanyName).HasColumnType("nvarchar(40)").IsRequired().HasMaxLength(40).ValueGeneratedNever();
            builder.Property(x => x.ContactName).HasColumnType("nvarchar(30)").HasMaxLength(30);
            builder.Property(x => x.Relationship).HasColumnType("varchar(9)").IsRequired().IsUnicode(false).HasMaxLength(9).ValueGeneratedNever();



//todo: Deleted foreign key and relation mapping configuration rows from here!!!!!!!!!!!!!


        }
    }
  
    // CustomerDemographics
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.34.1.0")]
    public  class CustomerDemographicConfiguration : IEntityTypeConfiguration<CustomerDemographic>
    {
	    public void Configure(EntityTypeBuilder<CustomerDemographic> builder)
        {
            builder.ToTable("CustomerDemographics", "dbo");
            builder.HasKey(x => x.CustomerTypeId);

            builder.Property(x => x.CustomerTypeId).HasColumnType("nchar(10)").IsRequired().HasMaxLength(10).ValueGeneratedNever();
            builder.Property(x => x.CustomerDesc).HasColumnName(@"CustomerDesc").HasColumnType("ntext").HasMaxLength(1073741823);



//todo: Deleted foreign key and relation mapping configuration rows from here!!!!!!!!!!!!!


        }
    }
  
    // Employees
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.34.1.0")]
    public  class EmployeeConfiguration : IEntityTypeConfiguration<Employee>
    {
	    public void Configure(EntityTypeBuilder<Employee> builder)
        {
            builder.ToTable("Employees", "dbo");
            builder.HasKey(x => x.EmployeeId);

            builder.Property(x => x.EmployeeId).HasColumnName(@"EmployeeID").HasColumnType("int").IsRequired().ValueGeneratedOnAdd();
            builder.Property(x => x.LastName).HasColumnType("nvarchar(20)").IsRequired().HasMaxLength(20);
            builder.Property(x => x.FirstName).HasColumnType("nvarchar(10)").IsRequired().HasMaxLength(10);
            builder.Property(x => x.Title).HasColumnType("nvarchar(30)").HasMaxLength(30);
            builder.Property(x => x.TitleOfCourtesy).HasColumnType("nvarchar(25)").HasMaxLength(25);
            builder.Property(x => x.BirthDate).HasColumnName(@"BirthDate").HasColumnType("datetime");
            builder.Property(x => x.HireDate).HasColumnName(@"HireDate").HasColumnType("datetime");
            builder.Property(x => x.Address).HasColumnType("nvarchar(60)").HasMaxLength(60);
            builder.Property(x => x.City).HasColumnType("nvarchar(15)").HasMaxLength(15);
            builder.Property(x => x.Region).HasColumnType("nvarchar(15)").HasMaxLength(15);
            builder.Property(x => x.PostalCode).HasColumnType("nvarchar(10)").HasMaxLength(10);
            builder.Property(x => x.Country).HasColumnType("nvarchar(15)").HasMaxLength(15);
            builder.Property(x => x.HomePhone).HasColumnType("nvarchar(24)").HasMaxLength(24);
            builder.Property(x => x.Extension).HasColumnType("nvarchar(4)").HasMaxLength(4);
            builder.Property(x => x.Photo).HasColumnName(@"Photo").HasColumnType("image").HasMaxLength(2147483647);
            builder.Property(x => x.Notes).HasColumnName(@"Notes").HasColumnType("ntext").HasMaxLength(1073741823);
            builder.Property(x => x.ReportsTo).HasColumnName(@"ReportsTo").HasColumnType("int");
            builder.Property(x => x.PhotoPath).HasColumnType("nvarchar(255)").HasMaxLength(255);



//todo: Deleted foreign key and relation mapping configuration rows from here!!!!!!!!!!!!!


        }
    }
  
    // Invoices
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.34.1.0")]
    public  class InvoiceConfiguration : IEntityTypeConfiguration<Invoice>
    {
	    public void Configure(EntityTypeBuilder<Invoice> builder)
        {
            builder.ToTable("Invoices", "dbo");
            builder.HasKey(x => new { x.CustomerName, x.Salesperson, x.OrderId, x.ShipperName, x.ProductId, x.ProductName, x.UnitPrice, x.Quantity, x.Discount });

            builder.Property(x => x.ShipName).HasColumnType("nvarchar(40)").HasMaxLength(40);
            builder.Property(x => x.ShipAddress).HasColumnType("nvarchar(60)").HasMaxLength(60);
            builder.Property(x => x.ShipCity).HasColumnType("nvarchar(15)").HasMaxLength(15);
            builder.Property(x => x.ShipRegion).HasColumnType("nvarchar(15)").HasMaxLength(15);
            builder.Property(x => x.ShipPostalCode).HasColumnType("nvarchar(10)").HasMaxLength(10);
            builder.Property(x => x.ShipCountry).HasColumnType("nvarchar(15)").HasMaxLength(15);
            builder.Property(x => x.CustomerId).HasColumnType("nchar(5)").HasMaxLength(5);
            builder.Property(x => x.CustomerName).HasColumnType("nvarchar(40)").IsRequired().HasMaxLength(40).ValueGeneratedNever();
            builder.Property(x => x.Address).HasColumnType("nvarchar(60)").HasMaxLength(60);
            builder.Property(x => x.City).HasColumnType("nvarchar(15)").HasMaxLength(15);
            builder.Property(x => x.Region).HasColumnType("nvarchar(15)").HasMaxLength(15);
            builder.Property(x => x.PostalCode).HasColumnType("nvarchar(10)").HasMaxLength(10);
            builder.Property(x => x.Country).HasColumnType("nvarchar(15)").HasMaxLength(15);
            builder.Property(x => x.Salesperson).HasColumnType("nvarchar(31)").IsRequired().HasMaxLength(31).ValueGeneratedNever();
            builder.Property(x => x.OrderId).HasColumnName(@"OrderID").HasColumnType("int").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.OrderDate).HasColumnName(@"OrderDate").HasColumnType("datetime");
            builder.Property(x => x.RequiredDate).HasColumnName(@"RequiredDate").HasColumnType("datetime");
            builder.Property(x => x.ShippedDate).HasColumnName(@"ShippedDate").HasColumnType("datetime");
            builder.Property(x => x.ShipperName).HasColumnType("nvarchar(40)").IsRequired().HasMaxLength(40).ValueGeneratedNever();
            builder.Property(x => x.ProductId).HasColumnName(@"ProductID").HasColumnType("int").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.ProductName).HasColumnType("nvarchar(40)").IsRequired().HasMaxLength(40).ValueGeneratedNever();
            builder.Property(x => x.UnitPrice).HasColumnType("decimal(19,4)").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.Quantity).HasColumnName(@"Quantity").HasColumnType("smallint").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.Discount).HasColumnName(@"Discount").HasColumnType("real").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.ExtendedPrice).HasColumnType("decimal(19,4)");
            builder.Property(x => x.Freight).HasColumnType("decimal(19,4)");



//todo: Deleted foreign key and relation mapping configuration rows from here!!!!!!!!!!!!!


        }
    }
  
    // Orders
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.34.1.0")]
    public  class OrderConfiguration : IEntityTypeConfiguration<Order>
    {
	    public void Configure(EntityTypeBuilder<Order> builder)
        {
            builder.ToTable("Orders", "dbo");
            builder.HasKey(x => x.OrderId);

            builder.Property(x => x.OrderId).HasColumnName(@"OrderID").HasColumnType("int").IsRequired().ValueGeneratedOnAdd();
            builder.Property(x => x.CustomerId).HasColumnType("nchar(5)").HasMaxLength(5);
            builder.Property(x => x.EmployeeId).HasColumnName(@"EmployeeID").HasColumnType("int");
            builder.Property(x => x.OrderDate).HasColumnName(@"OrderDate").HasColumnType("datetime");
            builder.Property(x => x.RequiredDate).HasColumnName(@"RequiredDate").HasColumnType("datetime");
            builder.Property(x => x.ShippedDate).HasColumnName(@"ShippedDate").HasColumnType("datetime");
            builder.Property(x => x.ShipVia).HasColumnName(@"ShipVia").HasColumnType("int");
            builder.Property(x => x.Freight).HasColumnType("decimal(19,4)");
            builder.Property(x => x.ShipName).HasColumnType("nvarchar(40)").HasMaxLength(40);
            builder.Property(x => x.ShipAddress).HasColumnType("nvarchar(60)").HasMaxLength(60);
            builder.Property(x => x.ShipCity).HasColumnType("nvarchar(15)").HasMaxLength(15);
            builder.Property(x => x.ShipRegion).HasColumnType("nvarchar(15)").HasMaxLength(15);
            builder.Property(x => x.ShipPostalCode).HasColumnType("nvarchar(10)").HasMaxLength(10);
            builder.Property(x => x.ShipCountry).HasColumnType("nvarchar(15)").HasMaxLength(15);



//todo: Deleted foreign key and relation mapping configuration rows from here!!!!!!!!!!!!!


        }
    }
  
    // Order Details
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.34.1.0")]
    public  class OrderDetailConfiguration : IEntityTypeConfiguration<OrderDetail>
    {
	    public void Configure(EntityTypeBuilder<OrderDetail> builder)
        {
            builder.ToTable("Order Details", "dbo");
            builder.HasKey(x => new { x.OrderId, x.ProductId });

            builder.Property(x => x.OrderId).HasColumnName(@"OrderID").HasColumnType("int").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.ProductId).HasColumnName(@"ProductID").HasColumnType("int").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.UnitPrice).HasColumnType("decimal(19,4)").IsRequired();
            builder.Property(x => x.Quantity).HasColumnName(@"Quantity").HasColumnType("smallint").IsRequired();
            builder.Property(x => x.Discount).HasColumnName(@"Discount").HasColumnType("real").IsRequired();



//todo: Deleted foreign key and relation mapping configuration rows from here!!!!!!!!!!!!!


        }
    }
  
    // Order Details Extended
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.34.1.0")]
    public  class OrderDetailsExtendedConfiguration : IEntityTypeConfiguration<OrderDetailsExtended>
    {
	    public void Configure(EntityTypeBuilder<OrderDetailsExtended> builder)
        {
            builder.ToTable("Order Details Extended", "dbo");
            builder.HasKey(x => new { x.OrderId, x.ProductId, x.ProductName, x.UnitPrice, x.Quantity, x.Discount });

            builder.Property(x => x.OrderId).HasColumnName(@"OrderID").HasColumnType("int").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.ProductId).HasColumnName(@"ProductID").HasColumnType("int").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.ProductName).HasColumnType("nvarchar(40)").IsRequired().HasMaxLength(40).ValueGeneratedNever();
            builder.Property(x => x.UnitPrice).HasColumnType("decimal(19,4)").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.Quantity).HasColumnName(@"Quantity").HasColumnType("smallint").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.Discount).HasColumnName(@"Discount").HasColumnType("real").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.ExtendedPrice).HasColumnType("decimal(19,4)");



//todo: Deleted foreign key and relation mapping configuration rows from here!!!!!!!!!!!!!


        }
    }
  
    // Orders Qry
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.34.1.0")]
    public  class OrdersQryConfiguration : IEntityTypeConfiguration<OrdersQry>
    {
	    public void Configure(EntityTypeBuilder<OrdersQry> builder)
        {
            builder.ToTable("Orders Qry", "dbo");
            builder.HasKey(x => new { x.OrderId, x.CompanyName });

            builder.Property(x => x.OrderId).HasColumnName(@"OrderID").HasColumnType("int").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.CustomerId).HasColumnType("nchar(5)").HasMaxLength(5);
            builder.Property(x => x.EmployeeId).HasColumnName(@"EmployeeID").HasColumnType("int");
            builder.Property(x => x.OrderDate).HasColumnName(@"OrderDate").HasColumnType("datetime");
            builder.Property(x => x.RequiredDate).HasColumnName(@"RequiredDate").HasColumnType("datetime");
            builder.Property(x => x.ShippedDate).HasColumnName(@"ShippedDate").HasColumnType("datetime");
            builder.Property(x => x.ShipVia).HasColumnName(@"ShipVia").HasColumnType("int");
            builder.Property(x => x.Freight).HasColumnType("decimal(19,4)");
            builder.Property(x => x.ShipName).HasColumnType("nvarchar(40)").HasMaxLength(40);
            builder.Property(x => x.ShipAddress).HasColumnType("nvarchar(60)").HasMaxLength(60);
            builder.Property(x => x.ShipCity).HasColumnType("nvarchar(15)").HasMaxLength(15);
            builder.Property(x => x.ShipRegion).HasColumnType("nvarchar(15)").HasMaxLength(15);
            builder.Property(x => x.ShipPostalCode).HasColumnType("nvarchar(10)").HasMaxLength(10);
            builder.Property(x => x.ShipCountry).HasColumnType("nvarchar(15)").HasMaxLength(15);
            builder.Property(x => x.CompanyName).HasColumnType("nvarchar(40)").IsRequired().HasMaxLength(40).ValueGeneratedNever();
            builder.Property(x => x.Address).HasColumnType("nvarchar(60)").HasMaxLength(60);
            builder.Property(x => x.City).HasColumnType("nvarchar(15)").HasMaxLength(15);
            builder.Property(x => x.Region).HasColumnType("nvarchar(15)").HasMaxLength(15);
            builder.Property(x => x.PostalCode).HasColumnType("nvarchar(10)").HasMaxLength(10);
            builder.Property(x => x.Country).HasColumnType("nvarchar(15)").HasMaxLength(15);



//todo: Deleted foreign key and relation mapping configuration rows from here!!!!!!!!!!!!!


        }
    }
  
    // Order Subtotals
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.34.1.0")]
    public  class OrderSubtotalConfiguration : IEntityTypeConfiguration<OrderSubtotal>
    {
	    public void Configure(EntityTypeBuilder<OrderSubtotal> builder)
        {
            builder.ToTable("Order Subtotals", "dbo");
            builder.HasKey(x => x.OrderId);

            builder.Property(x => x.OrderId).HasColumnName(@"OrderID").HasColumnType("int").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.Subtotal).HasColumnType("decimal(19,4)");



//todo: Deleted foreign key and relation mapping configuration rows from here!!!!!!!!!!!!!


        }
    }
  
    // Products
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.34.1.0")]
    public  class ProductConfiguration : IEntityTypeConfiguration<Product>
    {
	    public void Configure(EntityTypeBuilder<Product> builder)
        {
            builder.ToTable("Products", "dbo");
            builder.HasKey(x => x.ProductId);

            builder.Property(x => x.ProductId).HasColumnName(@"ProductID").HasColumnType("int").IsRequired().ValueGeneratedOnAdd();
            builder.Property(x => x.ProductName).HasColumnType("nvarchar(40)").IsRequired().HasMaxLength(40);
            builder.Property(x => x.SupplierId).HasColumnName(@"SupplierID").HasColumnType("int");
            builder.Property(x => x.CategoryId).HasColumnName(@"CategoryID").HasColumnType("int");
            builder.Property(x => x.QuantityPerUnit).HasColumnType("nvarchar(20)").HasMaxLength(20);
            builder.Property(x => x.UnitPrice).HasColumnType("decimal(19,4)");
            builder.Property(x => x.UnitsInStock).HasColumnName(@"UnitsInStock").HasColumnType("smallint");
            builder.Property(x => x.UnitsOnOrder).HasColumnName(@"UnitsOnOrder").HasColumnType("smallint");
            builder.Property(x => x.ReorderLevel).HasColumnName(@"ReorderLevel").HasColumnType("smallint");
            builder.Property(x => x.Discontinued).HasColumnName(@"Discontinued").HasColumnType("bit").IsRequired();



//todo: Deleted foreign key and relation mapping configuration rows from here!!!!!!!!!!!!!


        }
    }
  
    // Products Above Average Price
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.34.1.0")]
    public  class ProductsAboveAveragePriceConfiguration : IEntityTypeConfiguration<ProductsAboveAveragePrice>
    {
	    public void Configure(EntityTypeBuilder<ProductsAboveAveragePrice> builder)
        {
            builder.ToTable("Products Above Average Price", "dbo");
            builder.HasKey(x => x.ProductName);

            builder.Property(x => x.ProductName).HasColumnType("nvarchar(40)").IsRequired().HasMaxLength(40).ValueGeneratedNever();
            builder.Property(x => x.UnitPrice).HasColumnType("decimal(19,4)");



//todo: Deleted foreign key and relation mapping configuration rows from here!!!!!!!!!!!!!


        }
    }
  
    // Product Sales for 1997
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.34.1.0")]
    public  class ProductSalesFor1997Configuration : IEntityTypeConfiguration<ProductSalesFor1997>
    {
	    public void Configure(EntityTypeBuilder<ProductSalesFor1997> builder)
        {
            builder.ToTable("Product Sales for 1997", "dbo");
            builder.HasKey(x => new { x.CategoryName, x.ProductName });

            builder.Property(x => x.CategoryName).HasColumnType("nvarchar(15)").IsRequired().HasMaxLength(15).ValueGeneratedNever();
            builder.Property(x => x.ProductName).HasColumnType("nvarchar(40)").IsRequired().HasMaxLength(40).ValueGeneratedNever();
            builder.Property(x => x.ProductSales).HasColumnType("decimal(19,4)");



//todo: Deleted foreign key and relation mapping configuration rows from here!!!!!!!!!!!!!


        }
    }
  
    // Products by Category
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.34.1.0")]
    public  class ProductsByCategoryConfiguration : IEntityTypeConfiguration<ProductsByCategory>
    {
	    public void Configure(EntityTypeBuilder<ProductsByCategory> builder)
        {
            builder.ToTable("Products by Category", "dbo");
            builder.HasKey(x => new { x.CategoryName, x.ProductName, x.Discontinued });

            builder.Property(x => x.CategoryName).HasColumnType("nvarchar(15)").IsRequired().HasMaxLength(15).ValueGeneratedNever();
            builder.Property(x => x.ProductName).HasColumnType("nvarchar(40)").IsRequired().HasMaxLength(40).ValueGeneratedNever();
            builder.Property(x => x.QuantityPerUnit).HasColumnType("nvarchar(20)").HasMaxLength(20);
            builder.Property(x => x.UnitsInStock).HasColumnName(@"UnitsInStock").HasColumnType("smallint");
            builder.Property(x => x.Discontinued).HasColumnName(@"Discontinued").HasColumnType("bit").IsRequired().ValueGeneratedNever();



//todo: Deleted foreign key and relation mapping configuration rows from here!!!!!!!!!!!!!


        }
    }
  
    // Region
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.34.1.0")]
    public  class RegionConfiguration : IEntityTypeConfiguration<Region>
    {
	    public void Configure(EntityTypeBuilder<Region> builder)
        {
            builder.ToTable("Region", "dbo");
            builder.HasKey(x => x.RegionId);

            builder.Property(x => x.RegionId).HasColumnName(@"RegionID").HasColumnType("int").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.RegionDescription).HasColumnType("nchar(50)").IsRequired().HasMaxLength(50);



//todo: Deleted foreign key and relation mapping configuration rows from here!!!!!!!!!!!!!


        }
    }
  
    // Sales by Category
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.34.1.0")]
    public  class SalesByCategoryConfiguration : IEntityTypeConfiguration<SalesByCategory>
    {
	    public void Configure(EntityTypeBuilder<SalesByCategory> builder)
        {
            builder.ToTable("Sales by Category", "dbo");
            builder.HasKey(x => new { x.CategoryId, x.CategoryName, x.ProductName });

            builder.Property(x => x.CategoryId).HasColumnName(@"CategoryID").HasColumnType("int").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.CategoryName).HasColumnType("nvarchar(15)").IsRequired().HasMaxLength(15).ValueGeneratedNever();
            builder.Property(x => x.ProductName).HasColumnType("nvarchar(40)").IsRequired().HasMaxLength(40).ValueGeneratedNever();
            builder.Property(x => x.ProductSales).HasColumnType("decimal(19,4)");



//todo: Deleted foreign key and relation mapping configuration rows from here!!!!!!!!!!!!!


        }
    }
  
    // Sales Totals by Amount
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.34.1.0")]
    public  class SalesTotalsByAmountConfiguration : IEntityTypeConfiguration<SalesTotalsByAmount>
    {
	    public void Configure(EntityTypeBuilder<SalesTotalsByAmount> builder)
        {
            builder.ToTable("Sales Totals by Amount", "dbo");
            builder.HasKey(x => new { x.OrderId, x.CompanyName });

            builder.Property(x => x.SaleAmount).HasColumnType("decimal(19,4)");
            builder.Property(x => x.OrderId).HasColumnName(@"OrderID").HasColumnType("int").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.CompanyName).HasColumnType("nvarchar(40)").IsRequired().HasMaxLength(40).ValueGeneratedNever();
            builder.Property(x => x.ShippedDate).HasColumnName(@"ShippedDate").HasColumnType("datetime");



//todo: Deleted foreign key and relation mapping configuration rows from here!!!!!!!!!!!!!


        }
    }
  
    // Shippers
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.34.1.0")]
    public  class ShipperConfiguration : IEntityTypeConfiguration<Shipper>
    {
	    public void Configure(EntityTypeBuilder<Shipper> builder)
        {
            builder.ToTable("Shippers", "dbo");
            builder.HasKey(x => x.ShipperId);

            builder.Property(x => x.ShipperId).HasColumnName(@"ShipperID").HasColumnType("int").IsRequired().ValueGeneratedOnAdd();
            builder.Property(x => x.CompanyName).HasColumnType("nvarchar(40)").IsRequired().HasMaxLength(40);
            builder.Property(x => x.Phone).HasColumnType("nvarchar(24)").HasMaxLength(24);



//todo: Deleted foreign key and relation mapping configuration rows from here!!!!!!!!!!!!!


        }
    }
  
    // Summary of Sales by Quarter
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.34.1.0")]
    public  class SummaryOfSalesByQuarterConfiguration : IEntityTypeConfiguration<SummaryOfSalesByQuarter>
    {
	    public void Configure(EntityTypeBuilder<SummaryOfSalesByQuarter> builder)
        {
            builder.ToTable("Summary of Sales by Quarter", "dbo");
            builder.HasKey(x => x.OrderId);

            builder.Property(x => x.ShippedDate).HasColumnName(@"ShippedDate").HasColumnType("datetime");
            builder.Property(x => x.OrderId).HasColumnName(@"OrderID").HasColumnType("int").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.Subtotal).HasColumnType("decimal(19,4)");



//todo: Deleted foreign key and relation mapping configuration rows from here!!!!!!!!!!!!!


        }
    }
  
    // Summary of Sales by Year
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.34.1.0")]
    public  class SummaryOfSalesByYearConfiguration : IEntityTypeConfiguration<SummaryOfSalesByYear>
    {
	    public void Configure(EntityTypeBuilder<SummaryOfSalesByYear> builder)
        {
            builder.ToTable("Summary of Sales by Year", "dbo");
            builder.HasKey(x => x.OrderId);

            builder.Property(x => x.ShippedDate).HasColumnName(@"ShippedDate").HasColumnType("datetime");
            builder.Property(x => x.OrderId).HasColumnName(@"OrderID").HasColumnType("int").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.Subtotal).HasColumnType("decimal(19,4)");



//todo: Deleted foreign key and relation mapping configuration rows from here!!!!!!!!!!!!!


        }
    }
  
    // Suppliers
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.34.1.0")]
    public  class SupplierConfiguration : IEntityTypeConfiguration<Supplier>
    {
	    public void Configure(EntityTypeBuilder<Supplier> builder)
        {
            builder.ToTable("Suppliers", "dbo");
            builder.HasKey(x => x.SupplierId);

            builder.Property(x => x.SupplierId).HasColumnName(@"SupplierID").HasColumnType("int").IsRequired().ValueGeneratedOnAdd();
            builder.Property(x => x.CompanyName).HasColumnType("nvarchar(40)").IsRequired().HasMaxLength(40);
            builder.Property(x => x.ContactName).HasColumnType("nvarchar(30)").HasMaxLength(30);
            builder.Property(x => x.ContactTitle).HasColumnType("nvarchar(30)").HasMaxLength(30);
            builder.Property(x => x.Address).HasColumnType("nvarchar(60)").HasMaxLength(60);
            builder.Property(x => x.City).HasColumnType("nvarchar(15)").HasMaxLength(15);
            builder.Property(x => x.Region).HasColumnType("nvarchar(15)").HasMaxLength(15);
            builder.Property(x => x.PostalCode).HasColumnType("nvarchar(10)").HasMaxLength(10);
            builder.Property(x => x.Country).HasColumnType("nvarchar(15)").HasMaxLength(15);
            builder.Property(x => x.Phone).HasColumnType("nvarchar(24)").HasMaxLength(24);
            builder.Property(x => x.Fax).HasColumnType("nvarchar(24)").HasMaxLength(24);
            builder.Property(x => x.HomePage).HasColumnName(@"HomePage").HasColumnType("ntext").HasMaxLength(1073741823);



//todo: Deleted foreign key and relation mapping configuration rows from here!!!!!!!!!!!!!


        }
    }
  
    // Territories
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.34.1.0")]
    public  class TerritoryConfiguration : IEntityTypeConfiguration<Territory>
    {
	    public void Configure(EntityTypeBuilder<Territory> builder)
        {
            builder.ToTable("Territories", "dbo");
            builder.HasKey(x => x.TerritoryId);

            builder.Property(x => x.TerritoryId).HasColumnType("nvarchar(20)").IsRequired().HasMaxLength(20).ValueGeneratedNever();
            builder.Property(x => x.TerritoryDescription).HasColumnType("nchar(50)").IsRequired().HasMaxLength(50);
            builder.Property(x => x.RegionId).HasColumnName(@"RegionID").HasColumnType("int").IsRequired();



//todo: Deleted foreign key and relation mapping configuration rows from here!!!!!!!!!!!!!


        }
    }
  
    #endregion

    #region Stored procedure return models

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.34.1.0")]
    public class CustOrderHistReturnModel
    {
        public System.String ProductName { get; set; }
        public System.Int32? Total { get; set; }
    }

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.34.1.0")]
    public class CustOrdersDetailReturnModel
    {
        public System.String ProductName { get; set; }
        public System.Decimal? UnitPrice { get; set; }
        public System.Int16 Quantity { get; set; }
        public System.Int32? Discount { get; set; }
        public System.Decimal? ExtendedPrice { get; set; }
    }

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.34.1.0")]
    public class CustOrdersOrdersReturnModel
    {
        public System.Int32 OrderID { get; set; }
        public System.DateTime? OrderDate { get; set; }
        public System.DateTime? RequiredDate { get; set; }
        public System.DateTime? ShippedDate { get; set; }
    }

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.34.1.0")]
    public class EmployeeSalesByCountryReturnModel
    {
        public System.String Country { get; set; }
        public System.String LastName { get; set; }
        public System.String FirstName { get; set; }
        public System.DateTime? ShippedDate { get; set; }
        public System.Int32 OrderID { get; set; }
        public System.Decimal? SaleAmount { get; set; }
    }

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.34.1.0")]
    public class SalesByCategoryReturnModel
    {
        public System.String ProductName { get; set; }
        public System.Decimal? TotalPurchase { get; set; }
    }

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.34.1.0")]
    public class SalesByYearReturnModel
    {
        public System.DateTime? ShippedDate { get; set; }
        public System.Int32 OrderID { get; set; }
        public System.Decimal? Subtotal { get; set; }
        public System.String Year { get; set; }
    }

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.34.1.0")]
    public class TenMostExpensiveProductsReturnModel
    {
        public System.String TenMostExpensiveProducts { get; set; }
        public System.Decimal? UnitPrice { get; set; }
    }

    #endregion

}
// </auto-generated>


